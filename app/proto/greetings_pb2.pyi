"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Enabling lang support and auto-formatting in VSCode:
1. Install the extensions:
     - zxh404.vscode-proto3
     - xaver.clang-format
2. Install the clang-format binary (e.g. on Debian/Ubuntu):
     sudo apt install clang-format
3. Then set this VSCode setting:
     "clang-format.style": "{ IndentWidth: 4, BasedOnStyle: google,
     AlignConsecutiveAssignments: true }",
And optionally, "editor.formatOnSave": true

package is used to prevent naming conflicts with other .proto files, but
in Python, the package directive is ignored, since Python modules are
organized according to their location in the file system.
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _GreetingType:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _GreetingTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_GreetingType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    INTRODUCTION: _GreetingType.ValueType  # 0
    FAREWELL: _GreetingType.ValueType  # 1

class GreetingType(_GreetingType, metaclass=_GreetingTypeEnumTypeWrapper): ...

INTRODUCTION: GreetingType.ValueType  # 0
FAREWELL: GreetingType.ValueType  # 1
global___GreetingType = GreetingType

@typing_extensions.final
class Greeting(google.protobuf.message.Message):
    """A greeting represents a message you can tell a user."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    IDX_FIELD_NUMBER: builtins.int
    MESSAGE_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    idx: builtins.int
    message: builtins.str
    type: global___GreetingType.ValueType
    def __init__(
        self,
        *,
        idx: builtins.int = ...,
        message: builtins.str = ...,
        type: global___GreetingType.ValueType = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["idx", b"idx", "message", b"message", "type", b"type"]) -> None: ...

global___Greeting = Greeting
